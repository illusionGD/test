// vite.config.ts
import { defineConfig, loadEnv } from "vite";
import vue from "@vitejs/plugin-vue";
import autoprefixer from "autoprefixer";
import pxtorem from "postcss-pxtorem";
var getCommonConfig = function(mode) {
  return {
    plugins: [
      vue()
    ],
    resolve: {
      extension: [".mjs", ".js", ".ts", ".jsx", ".tsx", ".json"],
      alias: {
        "@": "/src"
      }
    },
    css: {
      postcss: {
        plugins: [
          pxtorem({
            rootValue: loadEnv(mode, process.cwd()).VITE_FIX_UNIT,
            propList: ["*"],
            replace: true,
            mediaQuery: false,
            minPixelValue: 3,
            exclude: /node_modules/i
          }),
          autoprefixer({
            overrideBrowserslist: [
              "Android 4.1",
              "iOS 7.1",
              "Chrome > 31",
              "ff > 31",
              "ie >= 8",
              "last 2 versions"
            ],
            grid: true
          })
        ]
      },
      preprocessorOptions: {
        scss: {
          charset: false,
          additionalData: '@import "@/assets/css/globalVariable.scss";'
        }
      }
    }
  };
};
var devConfig = {};
var prodConfig = {};
var vite_config_default = defineConfig(({ command, mode, ssrBuild }) => {
  const commonConfig = getCommonConfig(mode);
  let newConfig = {
    ...commonConfig
  };
  if (mode !== "production") {
    newConfig = { ...newConfig, ...devConfig };
  } else {
    newConfig = { ...newConfig, ...prodConfig };
  }
  return newConfig;
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCJFOlxcXFx0ZXh0XFxcXHdlYlxcXFx0ZXN0XFxcXGhvbGxvdy13ZWJcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIkU6XFxcXHRleHRcXFxcd2ViXFxcXHRlc3RcXFxcaG9sbG93LXdlYlxcXFx2aXRlLmNvbmZpZy50c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vRTovdGV4dC93ZWIvdGVzdC9ob2xsb3ctd2ViL3ZpdGUuY29uZmlnLnRzXCI7aW1wb3J0IHsgZGVmaW5lQ29uZmlnLCBsb2FkRW52IH0gZnJvbSAndml0ZSdcbmltcG9ydCB2dWUgZnJvbSAnQHZpdGVqcy9wbHVnaW4tdnVlJ1xuaW1wb3J0IGF1dG9wcmVmaXhlciBmcm9tICdhdXRvcHJlZml4ZXInXG5pbXBvcnQgcHh0b3JlbSBmcm9tICdwb3N0Y3NzLXB4dG9yZW0nXG4vKipcbiAqIEBkZXNjcmlwdGlvbjogXHU1MTZDXHU1MTcxXHU5MTREXHU3RjZFXHU1QkY5XHU4QzYxXG4gKi9cbmNvbnN0IGdldENvbW1vbkNvbmZpZyA9IGZ1bmN0aW9uIChtb2RlOiBzdHJpbmcpIHtcbiAgcmV0dXJuIHtcbiAgICBwbHVnaW5zOiBbXG4gICAgICB2dWUoKVxuICAgIF0sXG4gICAgcmVzb2x2ZToge1xuICAgICAgZXh0ZW5zaW9uOiBbJy5tanMnLCAnLmpzJywgJy50cycsICcuanN4JywgJy50c3gnLCAnLmpzb24nXSxcbiAgICAgIGFsaWFzOiB7XG4gICAgICAgICdAJzogJy9zcmMnXG4gICAgICB9XG4gICAgfSxcbiAgICBjc3M6IHtcbiAgICAgIHBvc3Rjc3M6IHtcbiAgICAgICAgcGx1Z2luczogW1xuICAgICAgICAgIHB4dG9yZW0oe1xuICAgICAgICAgICAgcm9vdFZhbHVlOiBsb2FkRW52KG1vZGUsIHByb2Nlc3MuY3dkKCkpLlZJVEVfRklYX1VOSVQsXG4gICAgICAgICAgICBwcm9wTGlzdDogWycqJ10sXG4gICAgICAgICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgICAgICAgbWVkaWFRdWVyeTogZmFsc2UsXG4gICAgICAgICAgICBtaW5QaXhlbFZhbHVlOiAzLFxuICAgICAgICAgICAgZXhjbHVkZTogL25vZGVfbW9kdWxlcy9pXG4gICAgICAgICAgfSksXG4gICAgICAgICAgYXV0b3ByZWZpeGVyKHtcbiAgICAgICAgICAgIG92ZXJyaWRlQnJvd3NlcnNsaXN0OiBbXG4gICAgICAgICAgICAgIFwiQW5kcm9pZCA0LjFcIixcbiAgICAgICAgICAgICAgXCJpT1MgNy4xXCIsXG4gICAgICAgICAgICAgIFwiQ2hyb21lID4gMzFcIixcbiAgICAgICAgICAgICAgXCJmZiA+IDMxXCIsXG4gICAgICAgICAgICAgIFwiaWUgPj0gOFwiLFxuICAgICAgICAgICAgICBcImxhc3QgMiB2ZXJzaW9uc1wiLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGdyaWQ6IHRydWVcbiAgICAgICAgICB9KVxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAgLy9jc3NcdTk4ODRcdTU5MDRcdTc0MDZcbiAgICAgIHByZXByb2Nlc3Nvck9wdGlvbnM6IHtcbiAgICAgICAgc2Nzczoge1xuICAgICAgICAgIGNoYXJzZXQ6IGZhbHNlLFxuICAgICAgICAgIGFkZGl0aW9uYWxEYXRhOiAnQGltcG9ydCBcIkAvYXNzZXRzL2Nzcy9nbG9iYWxWYXJpYWJsZS5zY3NzXCI7J1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uOiBcdTVGMDBcdTUzRDFcdTczQUZcdTU4ODNcdTkxNERcdTdGNkVcdTVCRjlcdThDNjFcbiAqL1xuY29uc3QgZGV2Q29uZmlnID0ge31cblxuLyoqXG4gKiBAZGVzY3JpcHRpb246IFx1NzUxRlx1NEVBN1x1NzNBRlx1NTg4M1x1OTE0RFx1N0Y2RVx1NUJGOVx1OEM2MVxuICovXG5jb25zdCBwcm9kQ29uZmlnID0ge1xuICAvLyBidWlsZDoge1xuICAvLyAgIG1pbmlmeTogJ3RlcnNlcicsXG4gIC8vICAgdGVyc2VyT3B0aW9uczoge1xuICAvLyAgICAgY29tcHJlc3M6IHtcbiAgLy8gICAgICAgLy9cdTc1MUZcdTRFQTdcdTczQUZcdTU4ODNcdTY1RjZcdTc5RkJcdTk2NjRjb25zb2xlXG4gIC8vICAgICAgIGRyb3BfY29uc29sZTogdHJ1ZSxcbiAgLy8gICAgICAgZHJvcF9kZWJ1Z2dlcjogdHJ1ZVxuICAvLyAgICAgfSxcbiAgLy8gICB9LFxuICAvLyB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZygoeyBjb21tYW5kLCBtb2RlLCBzc3JCdWlsZCB9KSA9PiB7XG4gIGNvbnN0IGNvbW1vbkNvbmZpZyA9IGdldENvbW1vbkNvbmZpZyhtb2RlKVxuICBsZXQgbmV3Q29uZmlnID0ge1xuICAgIC4uLmNvbW1vbkNvbmZpZ1xuICB9XG4gIGlmIChtb2RlICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBuZXdDb25maWcgPSB7IC4uLm5ld0NvbmZpZywgLi4uZGV2Q29uZmlnIH1cbiAgfSBlbHNlIHtcbiAgICBuZXdDb25maWcgPSB7IC4uLm5ld0NvbmZpZywgLi4ucHJvZENvbmZpZyB9XG4gIH1cblxuICByZXR1cm4gbmV3Q29uZmlnXG59KVxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUE2USxTQUFTLGNBQWMsZUFBZTtBQUNuVCxPQUFPLFNBQVM7QUFDaEIsT0FBTyxrQkFBa0I7QUFDekIsT0FBTyxhQUFhO0FBSXBCLElBQU0sa0JBQWtCLFNBQVUsTUFBYztBQUM5QyxTQUFPO0FBQUEsSUFDTCxTQUFTO0FBQUEsTUFDUCxJQUFJO0FBQUEsSUFDTjtBQUFBLElBQ0EsU0FBUztBQUFBLE1BQ1AsV0FBVyxDQUFDLFFBQVEsT0FBTyxPQUFPLFFBQVEsUUFBUSxPQUFPO0FBQUEsTUFDekQsT0FBTztBQUFBLFFBQ0wsS0FBSztBQUFBLE1BQ1A7QUFBQSxJQUNGO0FBQUEsSUFDQSxLQUFLO0FBQUEsTUFDSCxTQUFTO0FBQUEsUUFDUCxTQUFTO0FBQUEsVUFDUCxRQUFRO0FBQUEsWUFDTixXQUFXLFFBQVEsTUFBTSxRQUFRLElBQUksQ0FBQyxFQUFFO0FBQUEsWUFDeEMsVUFBVSxDQUFDLEdBQUc7QUFBQSxZQUNkLFNBQVM7QUFBQSxZQUNULFlBQVk7QUFBQSxZQUNaLGVBQWU7QUFBQSxZQUNmLFNBQVM7QUFBQSxVQUNYLENBQUM7QUFBQSxVQUNELGFBQWE7QUFBQSxZQUNYLHNCQUFzQjtBQUFBLGNBQ3BCO0FBQUEsY0FDQTtBQUFBLGNBQ0E7QUFBQSxjQUNBO0FBQUEsY0FDQTtBQUFBLGNBQ0E7QUFBQSxZQUNGO0FBQUEsWUFDQSxNQUFNO0FBQUEsVUFDUixDQUFDO0FBQUEsUUFDSDtBQUFBLE1BQ0Y7QUFBQSxNQUVBLHFCQUFxQjtBQUFBLFFBQ25CLE1BQU07QUFBQSxVQUNKLFNBQVM7QUFBQSxVQUNULGdCQUFnQjtBQUFBLFFBQ2xCO0FBQUEsTUFDRjtBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBQ0Y7QUFLQSxJQUFNLFlBQVksQ0FBQztBQUtuQixJQUFNLGFBQWEsQ0FXbkI7QUFFQSxJQUFPLHNCQUFRLGFBQWEsQ0FBQyxFQUFFLFNBQVMsTUFBTSxTQUFTLE1BQU07QUFDM0QsUUFBTSxlQUFlLGdCQUFnQixJQUFJO0FBQ3pDLE1BQUksWUFBWTtBQUFBLElBQ2QsR0FBRztBQUFBLEVBQ0w7QUFDQSxNQUFJLFNBQVMsY0FBYztBQUN6QixnQkFBWSxFQUFFLEdBQUcsV0FBVyxHQUFHLFVBQVU7QUFBQSxFQUMzQyxPQUFPO0FBQ0wsZ0JBQVksRUFBRSxHQUFHLFdBQVcsR0FBRyxXQUFXO0FBQUEsRUFDNUM7QUFFQSxTQUFPO0FBQ1QsQ0FBQzsiLAogICJuYW1lcyI6IFtdCn0K
